scriptencoding utf-8
se nocompatible
" vim-plug =================================================
let g:plug_threads = 2

call plug#begin('~/.vim/plugged')
" terminal -------------------------------------------------
"Plug 'mattn/vim-terminal'

" indentation display --------------------------------------
"Plug 'Yggdroot/indentLine', { 'for': ['python', 'haskell', 'c', 'cpp'] }
"Plug 'nathanaelkane/vim-indent-guides', { 'for': ['haskell', 'python', 'c'] }

" elixir ---------------------------------------------------
"Plug 'elixir-lang/vim-elixir', { 'for': ['elixir'] }

" toml -----------------------------------------------------
" for cargo (rust) files
Plug 'cespare/vim-toml', { 'for': 'toml' }

" markdown -------------------------------------------------
Plug 'godlygeek/tabular', { 'for': 'markdown' }
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }

" git integration ------------------------------------------
"Plug 'tpope/vim-fugitive' " git wrapper
"Plug 'junegunn/vim-github-dashboard' " GH events browser
"Plug 'junegunn/gv.vim' " light git repo browser
"Plug 'gregsexton/gitv' " git repo browser
"Plug 'mattn/gist-vim'

" some random settings -------------------------------------
"Plug 'tpope/vim-sensible'
"Plug 'tpope/vim-obsession'

" rust stuff -----------------------------------------------
Plug 'rust-lang/rust.vim', { 'for': 'rust' }

" haskell stuff --------------------------------------------
Plug 'vim-scripts/haskell.vim', { 'for': 'haskell' } " syntax for haskell
"Plug 'eagletmt/ghcmod-vim', { 'for': 'haskell' }" GHC-Mod integration
" completion plugin for haskell
"Plug 'eagletmt/neco-ghc', { 'for': 'haskell' } " (requires GHC-Mod: cabal install ghc-mod)
"Plug 'lukerandall/haskellmode-vim', { 'for': 'haskell' }
"Plug 'dag/vim2hs', { 'for': 'haskell' } " Fancy Stuff

" files browser
"Plug 'Shougo/vimfiler.vim'
"Plug 'scrooloose/nerdtree'
"Plug 'bling/vim-bufferline'
"Plug 'jlanzarotta/bufexplorer'

" general --------------------------------------------------
" auto-window resize
"Plug 'justincampbell/vim-eighties'

" visual increment
"Plug 'triglav/vim-visual-increment'

" sideways
"Plug 'AndrewRadev/sideways.vim'

" yankring
"Plug 'vim-scripts/YankRing.vim'

" vimwiki
"Plug 'vimwiki/vimwiki', { 'for': ['vimwiki', 'wiki'], 'on': ['VimwikiIndex', 'VimwikiTabIndex', 'VimwikiUISelect', 'VimwikiDiaryIndex', 'VimwikiMakeDiaryNote', 'VimwikiTabMakeDiaryNote', 'VimwikiFollowLink', 'VimwikiGoBackLink', 'VimwikiSplitLink', 'VimwikiVSplitLink', 'VimwikiTabnewLink', 'VimwikiNextLink', 'VimwikiPrevLink', 'VimwikiGoto', 'VimwikiDeleteLink', 'VimwikiRenameLink', 'Vimwiki2HTML', 'Vimwiki2HTMLBrowse', 'VimwikiAll2HTML', 'VimwikiToggleListItem', 'VimwikiListChangeLevel', 'VimwikiSearch', 'VimwikiBacklinks', 'VimwikiTable', 'VimwikiTableMoveColumnLeft', 'VimwikiGenerateLinks', 'VimwikiDiaryGenerateLinks', 'VimwikiDiaryNextDay', 'VimwikiDiaryPrevDay', 'VimwikiTOC', 'VimwikiCheckLinks', 'VimwikiRebuildTags', 'VimwikiSearchTags', 'VimwikiGenerateTags'] }

" windowswap
"Plug 'wesQ3/vim-windowswap'

" fuzzy finder n stuff
"Plug 'szw/vim-ctrlspace'

" parens/brackets auto closing
"Plug 'Raimondi/delimitMate'

" completion engine -- req python2+
"Plug 'Valloric/YouCompleteMe', { 'do': './install.py', 'for': ['haskell', 'python', 'c'] } 

" Molokai coloscheme
Plug 'tomasr/molokai'

" async execution lib
"Plug 'Shougo/vimproc.vim', { 'do': 'make'}

call plug#end()

" general ==================================================
filetype plugin indent on
se ambiwidth=single
se autochdir
se autoindent
se autoread
se backspace=2
se clipboard=unnamed
se cmdheight=1
se colorcolumn=60
se conceallevel=0
se confirm
se cursorcolumn
se cursorline
se dir=~/.vim/swp//
se encoding=utf-8
se expandtab
se fileencoding=utf-8
se foldenable
se foldmethod=manual
se hidden
se nohlsearch
se incsearch
se laststatus=2
se linebreak
se noerrorbells
se noruler
se showmode
se nospell
se nowrap
se number
se omnifunc=syntaxcomplete#Complete
se relativenumber
se scrolljump=10
se scrolloff=5
se shiftwidth=4
se shortmess=at
se showcmd
se showtabline=2
se smartindent
se smarttab
se softtabstop=0
se splitbelow
se splitright
se t_Co=256
se tabpagemax=30
se tabstop=8
se ttimeoutlen=0 " status bar change mode delay (ms)
se viminfo+=n~/.vim/viminfo
se wildignore+=*.swp,*.o
se wildmenu
highlight comment cterm=italic
syntax on
"se mouse=a

" Status Line ==============================================
se statusline=\ 
se statusline+=%([%n]\ %f%)\  " [buf#] fname
se statusline+=%(%m%r%h%w%) " modified/modifiable/etc
se statusline+=%=%y\  " ftype
se statusline+=%{strlen(&fenc)?&fenc:'none'}: "file encoding
se statusline+=%{&ff}\ \|\  "file format
se statusline+=%(%l:%c\ \|\ %L\ \|\ %) " #L:#C | #TL |

" vim -b : edit binary using xxd-format --------------------
augroup Binary
  au!
  au BufReadPre  *.o,*.dbg,*.x,*.out let &bin = 1
  au BufReadPost *.o,*.dbg,*.x,*.out if &bin | %!xxd
  au BufReadPost *.o,*.dbg,*.x,*.out set filetype = xxd | endif
  au BufWritePre *.o,*.dbg,*.x,*.out if &bin | %!xxd -r
  au BufWritePre *.o,*.dbg,*.x,*.out endif
  au BufWritePost *.o,*.dbg,*.x,*.out if &bin | %!xxd
  au BufWritePost *.o,*.dbg,*.x,*.out set nomod | endif
augroup END

" bindings -------------------------------------------------
" quickfix
nnoremap <F4> :cwindow<CR>
nnoremap <F5> :make<CR>:cwindow<CR>
nnoremap <F6> :make clean<CR>:cwindow<CR>
nnoremap <F7> :cprev<CR>
nnoremap <F8> :cnext<CR>
nnoremap <F9> :cclose<CR>

" leader/localleader
let mapleader = ','
let maplocalleader = ''

" = buffer/function
nnoremap <LEADER>M maggVG=`a_zz
nnoremap <LEADER>m ma]][[V%=`a_zz

nnoremap ZZ :w<CR>
nnoremap QQ :q!<CR>
nnoremap ZQ :x<CR>

"movement keys
nnoremap <C-J> 5j
nnoremap <C-K> 5k
vnoremap <C-J> 5j
vnoremap <C-K> 5k
nnoremap w W
nnoremap b B
nnoremap W w
nnoremap B b
nnoremap e E
nnoremap E e
vnoremap w W
vnoremap b B
vnoremap W w
vnoremap B b
vnoremap e E
vnoremap E e

"bye bye arrow keys
"inoremap <DOWN> <NOP>
"nnoremap <DOWN> <NOP>
"vnoremap <DOWN> <NOP>
"inoremap <LEFT> <NOP>
"nnoremap <LEFT> <NOP>
"vnoremap <LEFT> <NOP>
"inoremap <RIGHT> <NOP>
"nnoremap <RIGHT> <NOP>
"vnoremap <RIGHT> <NOP>
"inoremap <UP> <NOP>
"nnoremap <UP> <NOP>
"vnoremap <UP> <NOP>

nnoremap <SPACE> za

" move cursor to the beggining/end of the line
nnoremap gh _
nnoremap gl $
nnoremap gj G
nnoremap gk gg
vnoremap gh _
vnoremap gl $
vnoremap gj G
vnoremap gk gg

" visual
nnoremap v <C-V>
nnoremap <C-V> v

" search
nnoremap <C-H> :se hlsearch!<CR>
nnoremap <silent><BS> :se hlsearch!<CR>

vnoremap / y/<C-R>"<CR>:se hlsearch<CR>
nnoremap / :se hlsearch<CR>/
nnoremap n :se hlsearch<CR>n
nnoremap N :se hlsearch<CR>N
nnoremap * :se hlsearch<CR>*

" vimrc edit
nnoremap <LEADER>ev :e $MYVIMRC<CR>
nnoremap <LEADER>sv :source $MYVIMRC<CR>

" tabs
nnoremap <LOCALLEADER>1 1gt
nnoremap <LOCALLEADER>2 2gt
nnoremap <LOCALLEADER>3 3gt
nnoremap <LOCALLEADER>4 4gt
nnoremap <LOCALLEADER>5 5gt
nnoremap <LOCALLEADER>6 6gt
nnoremap <LOCALLEADER>7 7gt
nnoremap <LOCALLEADER>8 8gt
nnoremap <LOCALLEADER>9 9gt
nnoremap <LOCALLEADER>l gt
nnoremap <LOCALLEADER>h gT
nnoremap <C-W>tn :tabnew<CR>
nnoremap <C-W>tq :tabclose<CR>

" windows
nnoremap <C-W>tf <C-W>f<C-W>T
nnoremap <C-W>q :bdelete<CR>
nnoremap <C-W>n :new<CR>
nnoremap <C-W>v :vnew<CR>
nnoremap <C-L> :ls<CR>

" put stuff around words
nnoremap <LEADER>" viw<ESC>a"<ESC>bi"<ESC>el
nnoremap <LEADER>' viw<ESC>a'<ESC>bi'<ESC>el
nnoremap <LEADER>` viw<ESC>a`<ESC>bi`<ESC>el
nnoremap <LEADER>( viw<ESC>a)<ESC>bi(<ESC>el
nnoremap <LEADER>) viw<ESC>a)<ESC>bi(<ESC>el
nnoremap <LEADER>[ viw<ESC>a]<ESC>bi[<ESC>el
nnoremap <LEADER>] viw<ESC>a]<ESC>bi[<ESC>el
nnoremap <LEADER>{ viw<ESC>a}<ESC>bi{<ESC>el
nnoremap <LEADER>} viw<ESC>a}<ESC>bi{<ESC>el
nnoremap <LEADER>< viw<ESC>a><ESC>bi<<ESC>el
nnoremap <LEADER>> viw<ESC>a><ESC>bi<<ESC>el

" put stuff around selected text
vnoremap <LEADER>" <ESC>`>a"<ESC>`<i"<ESC>
vnoremap <LEADER>' <ESC>`>a'<ESC>`<i'<ESC>
vnoremap <LEADER>` <ESC>`>a`<ESC>`<i`<ESC>
vnoremap <LEADER>( <ESC>`>a)<ESC>`<i(<ESC>
vnoremap <LEADER>) <ESC>`>a)<ESC>`<i(<ESC>
vnoremap <LEADER>[ <ESC>`>a]<ESC>`<i[<ESC>
vnoremap <LEADER>] <ESC>`>a]<ESC>`<i[<ESC>
vnoremap <LEADER>{ <ESC>`>a}<ESC>`<i{<ESC>
vnoremap <LEADER>} <ESC>`>a}<ESC>`<i{<ESC>
vnoremap <LEADER>< <ESC>`>a><ESC>`<i<<ESC>
vnoremap <LEADER>> <ESC>`>a><ESC>`<i<<ESC>

" abrevs ===================================================
iabbrev adn and
iabbrev amx max
iabbrev itn int
iabbrev reurnt return
iabbrev tehn then
iabbrev tepydef typedef
iabbrev waht what
iabbrev strutc struct
iabbrev flaot float

" invisibles ===============================================
se nolist
se listchars=tab:\|‚ñ∏,eol:¬¨,trail:‚àô
"se listchars=tab:>~,trail:.
nnoremap <C-P> :se list!<CR>

" indentline ===============================================
"nnoremap <silent><TAB> :IndentLinesToggle<CR>
"let g:indentLine_char = '|'
"let g:indentLine_color_term = 239
"let g:indentLine_color_dark = 2
"let g:indentLine_leadingSpaceChar = '‚ñ∏'
"let g:indentLine_leadingSpaceEnabled = 0
"let g:indentLine_enabled = 0

" NETRW files browser ===============================
let g:netrw_liststyle = 3 " listing style
let g:netrw_browse_split = 0 " opening behaviour
map <silent><C-E> :Explore<CR>

" monokai theme ============================================
colorscheme molokai
let g:molokai_original = 1
let g:rehash256 = 0

" vimwiki ==================================================
"nmap <LOCALLEADER>es :VimwikiUISelect<CR>
"au BufNewFile,BufRead,BufReadPost *.wiki set filetype=vimwiki
"let g:vimwiki_hl_headers = 0
"let g:vimwiki_hl_cb_checked = 1
"let g:vimwiki_global_ext = 0
"let g:vimwiki_ext2syntax = {
"    \ '.md': 'markdown',
"    \ '.wiki': 'default'
"    \ }
"let g:vimwiki_menu = '' " 'Vimwiki'
"let g:vimwiki_listsyms = ' .oOX'
"let g:vimwiki_listsyms = '‚úó‚óã‚óê‚óè‚úì'
"let g:vimwiki_use_mouse = 0
"let g:vimwiki_folding = ''
"let g:vimwiki_use_calendar = 0
"let g:vimwiki_table_mappings = 0
"let g:vimwiki_table_auto_fmt = 1
"let g:vimwiki_CJK_length = 0 " UTF8 related
"let g:vimwiki_dir_link = ''
"let g:vimwiki_conceallevel = 2
"let g:vimwiki_autowriteall = 0
"let g:vimwiki_url_maxsave = 15 "default
"let g:vimwiki_map_prefix = '<LOCALLEADER>e'
"let g:vimwiki_auto_chdir = 1
"
"" change 'path' if needed
"let g:vimwiki_list = [{
"    \ 'path': '~/Documents/my_stuff/vim/wiki',
"    \ 'auto_export': 0,
"    \ 'auto_toc': 1,
"    \ 'syntax': 'default',
"    \ 'ext': '.wiki',
"    \ 'maxhl': 1,
"    \ 'auto_tags': 1,
"    \ 'list_margin': -1
"    \ }]

" delimitmate ==============================================
"let delimitMate_expand_cr = 1

" tabular ==================================================
let g:tabular_loaded = 1

" vim-markdown =============================================
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_folding_style_pythonic = 0
let g:vim_markdown_folding_level = 1
let g:vim_markdown_no_default_key_mappings = 1
let g:vim_markdown_toc_autofit = 1
let g:vim_markdown_emphasis_multiline = 0
let g:vim_markdown_math = 0

autocmd VimEnter * echo "Fuck You Human .l."

" stuff to remember
" :h session-file
