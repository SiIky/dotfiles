/* appearance */
static const char *fonts[] = {
    "Hermit:size=10"
};
static const char         dmenufont[]       = "Hermit:size=10";
static const char         normbordercolor[] = "#222222";
static const char         normbgcolor[]     = "#333333";
static const char         normfgcolor[]     = "#00ff00";
static const char         selbordercolor[]  = "#ff0000";
static const char         selbgcolor[]      = "#000000";
static const char         selfgcolor[]      = "#00ff00";
static const unsigned int borderpx          = 1;        /* border pixel of windows */
static const unsigned int snap              = 16;       /* snap pixel */
static const int          showbar           = 1;        /* 0 means no bar */
static const int          topbar            = 1;        /* 0 means bottom bar */

/* 0 means the scroll wheel won't change focus */
static const int focusonwheelscroll = 0;

/* tagging */
static const char *tags[] = { "ViM", "whatever", "mm", "www", "void" };

static const Rule rules[] = {
    /* xprop(1):
     *	WM_CLASS(STRING) = instance, class
     *	WM_NAME(STRING) = title
     */
    /* class      instance    title       tags mask     isfloating   monitor */
    { "Gimp",     NULL,       NULL,       0,            1,           -1 },
    { "Firefox",  NULL,       NULL,       1 << 3,       0,           -1 },
};

/* layout(s) */
static const float mfact       = 0.50; /* factor of master area size [0.05..0.95] */
static const int   nmaster     = 1;    /* number of clients in master area */
static const int   resizehints = 1;    /* 1 means respect size hints in tiled resizals */

static const Layout layouts[] = {
    /* symbol     arrange function */
    { "[]=",      tile },    /* first entry is default */
    { "[M]",      monocle },
    { "><>",      NULL },    /* no layout function means floating behavior */
};

/* key definitions */
#define LAlt            Mod1Mask
#define LWinKey         Mod4Mask
#define TAGKEYS(KEY,TAG) \
    { LWinKey,                          KEY,    view,          {.ui = 1 << TAG} }, \
    { LWinKey|ControlMask,              KEY,    toggleview,    {.ui = 1 << TAG} }, \
    { LWinKey|ShiftMask,                KEY,    tag,           {.ui = 1 << TAG} }, \
    { LWinKey|ControlMask|ShiftMask,    KEY,    toggletag,     {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static char        dmenumon[2]  = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[]   = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };
static const char *termcmd[]    = { "st", NULL };
static const char *ffcmd[]      = { "firefox", NULL };

static Key keys[] = {
    /* modifier                 key               function               argument */
    { LWinKey,                  XK_r,             spawn,                 {.v = dmenucmd } },
    { LWinKey,                  XK_t,             spawn,                 {.v = termcmd } },
    { LWinKey,                  XK_w,             spawn,                 {.v = ffcmd } },
    { LWinKey,                  XK_h,             togglebar,             {0} },
    { LAlt,                     XK_Tab,           focusstack,            {.i = +1 } },
    { LAlt|ShiftMask,           XK_Tab,           focusstack,            {.i = -1 } },
    { LWinKey,                  XK_i,             incnmaster,            {.i = +1 } },
    { LWinKey,                  XK_d,             incnmaster,            {.i = -1 } },
    { LWinKey|ShiftMask,        XK_h,             setmfact,              {.f = -0.05} },
    { LWinKey|ShiftMask,        XK_l,             setmfact,              {.f = +0.05} },
    { LWinKey,                  XK_Return,        zoom,                  {0} },
    { LWinKey,                  XK_Tab,           view,                  {0} },
    { LWinKey|ShiftMask,        XK_c,             killclient,            {0} },
    { LWinKey,                  XK_space,         setlayout,             {0} },
    { LWinKey|ShiftMask,        XK_space,         togglefloating,        {0} },
    { LWinKey,                  XK_0,             view,                  {.ui = ~0 } },
    { LWinKey|ShiftMask,        XK_0,             tag,                   {.ui = ~0 } },
    { LWinKey,                  XK_comma,         focusmon,              {.i = -1 } },
    { LWinKey,                  XK_period,        focusmon,              {.i = +1 } },
    { LWinKey|ShiftMask,        XK_comma,         tagmon,                {.i = -1 } },
    { LWinKey|ShiftMask,        XK_period,        tagmon,                {.i = +1 } },
    { LWinKey|ShiftMask,        XK_q,             quit,                  {0} },
    TAGKEYS(                    XK_1,                                    0)
    TAGKEYS(                    XK_2,                                    1)
    TAGKEYS(                    XK_3,                                    2)
    TAGKEYS(                    XK_4,                                    3)
    TAGKEYS(                    XK_5,                                    4)
};

/* button definitions */
/* click can be ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
    /* click            event mask    button      function           argument */
    { ClkLtSymbol,      0,            Button1,    setlayout,         {0} },
    { ClkWinTitle,      0,            Button2,    zoom,              {0} },
    { ClkStatusText,    0,            Button2,    spawn,             {.v = termcmd } },
    { ClkClientWin,     LWinKey,      Button1,    movemouse,         {0} },
    { ClkClientWin,     LWinKey,      Button2,    togglefloating,    {0} },
    { ClkClientWin,     LWinKey,      Button3,    resizemouse,       {0} },
    { ClkTagBar,        0,            Button1,    view,              {0} },
    { ClkTagBar,        0,            Button3,    toggleview,        {0} },
    { ClkTagBar,        LWinKey,      Button1,    tag,               {0} },
    { ClkTagBar,        LWinKey,      Button3,    toggletag,         {0} },
};
